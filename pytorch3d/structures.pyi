from typing import Sequence, Union, List, Optional
from numbers import Number
import torch
from pytorch3d.structures.pointclouds import Pointclouds as Pointclouds
from pytorch3d.renderer import TexturesVertex, TexturesUV, TexturesAtlas

class Meshes(Sequence["Meshes"]):
    device: torch.device
    textures: Optional[Union[TexturesVertex, TexturesUV, TexturesAtlas]]
    def __init__(self, verts, faces, textures=None):...
    def __getitem__(
        self, index: Union[int, List[int], slice, torch.Tensor, torch.BoolTensor, torch.LongTensor]) -> "Meshes":...
    def isempty(self) -> bool:...
    def verts_list(self) -> List[torch.Tensor]:...
    def faces_list(self) -> List[torch.Tensor]:...
    def verts_packed(self) -> torch.Tensor:...
    def verts_padded(self) -> torch.Tensor:...
    def verts_packed_to_mesh_idx(self) -> torch.LongTensor:...
    def faces_packed_to_mesh_idx(self) -> torch.LongTensor:...
    def edges_packed_to_mesh_idx(self) -> torch.LongTensor:...
    def mesh_to_verts_packed_first_idx(self) -> torch.LongTensor:...
    def mesh_to_faces_packed_first_idx(self) -> torch.LongTensor:...
    def num_verts_per_mesh(self) -> torch.LongTensor:...
    def faces_packed(self) -> torch.Tensor:...
    def num_faces_per_mesh(self) -> torch.LongTensor:...
    def edges_packed(self) -> torch.Tensor:...
    def num_edges_per_mesh(self) -> torch.LongTensor:...
    def verts_padded_to_packed_idx(self) -> torch.Tensor:...
    def verts_normals_packed(self) -> torch.Tensor:...
    def verts_normals_list(self) -> List[torch.Tensor]:...
    def faces_normals_packed(self) -> torch.Tensor:...
    def faces_normals_list(self) -> List[torch.Tensor]:...
    def faces_areas_packed(self) -> torch.Tensor:...
    def laplacian_packed(self) -> torch.Tensor:...
    def clone(self) -> "Meshes":...
    def to(self, device) -> "Meshes":...
    def extend(self, N: int) -> "Meshes":...
    def split(self, split_sizes: list) -> List["Meshes"]:...
    def offset_verts_(self, vert_offsets_packed: torch.Tensor) -> "Meshes":...
    def offset_verts(self, vert_offsets_packed: torch.Tensor) -> "Meshes":...
    def scale_verts_(self, scale: Union[float, Number, torch.Tensor]) -> "Meshes":...
    def scale_verts(self, scale: Union[float, Number, torch.Tensor]) -> "Meshes":...
    def get_bounding_boxes(self) -> torch.Tensor:...

def join_meshes_as_batch(meshes: List[Meshes], include_textures: bool=True) -> Meshes:...

def join_meshes_as_scene(meshes: Union[Meshes, List[Meshes]], include_textures: bool=True) -> Meshes:...