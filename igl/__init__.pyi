from typing import Tuple, Union
import numpy as np
import scipy.sparse

MASSMATRIX_TYPE_BARYCENTRIC = 0
MASSMATRIX_TYPE_VORONOI = 1
MASSMATRIX_TYPE_FULL = 2

PER_VERTEX_NORMALS_WEIGHTING_TYPE_UNIFORM = 0
PER_VERTEX_NORMALS_WEIGHTING_TYPE_AREA = 1
PER_VERTEX_NORMALS_WEIGHTING_TYPE_ANGLE = 2

# TODO annotate return NDArray dtypes

def read_triangle_mesh(
    filename: str, dtypef: Union[np.dtype, str, type] = "float"
) -> Tuple[np.ndarray, np.ndarray]: ...
def write_triangle_mesh(
    filename: str, v: np.ndarray, f: np.ndarray, force_ascii: bool = True
) -> bool: ...
def per_face_normals(v: np.ndarray, f: np.ndarray, z: np.ndarray) -> np.ndarray: ...
def per_vertex_normals(v: np.ndarray, f: np.ndarray, weighting: int = 0) -> np.ndarray: ...
def triangle_triangle_adjacency(f: np.ndarray) -> Tuple[np.ndarray, np.ndarray]: ...
def cotmatrix(v: np.ndarray, f: np.ndarray) -> scipy.sparse.csc_matrix: ...
def massmatrix(v: np.ndarray, f: np.ndarray, type: int = 3) -> scipy.sparse.csc_matrix: ...
def doublearea(v: np.ndarray, f: np.ndarray) -> np.ndarray: ...
def grad(
    v: np.ndarray, f: np.ndarray, uniform: bool = False
) -> scipy.sparse.csc_matrix: ...
def arap_rhs(
    v: np.ndarray, f: np.ndarray, d: int, energy: int
) -> scipy.sparse.csc_matrix: ...
def adjacency_matrix(f: np.ndarray) -> scipy.sparse.csc_matrix: ...
